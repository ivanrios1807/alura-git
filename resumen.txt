**git log es el registro de todos los cambios que hacemos 
--
** git status: es para saber el estado de tal carpeta

** git add "nombre del archivo":para que git monitoree los cambios o agrege las modificaciones de ese archivo
si hago **git add . => monitorea todos los archivos
**git commit -m "mensaje general de lo que se cambio" y guardamos los cambiios para el git
*************************************************************************************
"en caso de que haya un error hay que 'registrarse primero'" => con el siguiente comando: ** git config --global user.email "email" 
tambien tenemos que usar:** git config --global user.name "nombre"
*************************************************************************************

**git log** nos permite ver el registro de todos los cambios que hacemos 
para configurar mi email y mi nombre hago:
git config --local(o tambien --global) user.name "nombre"

si ahora escribo en el terminal:
 git config user.name 
la consola me va a dar el nombre 
si escribo
 git config user.email 
la consola va a dar  el email que ya registre

************************************************************************************************************
tambioen podemos usar 
git log --oneline
git log -p (para salir de este comando usar ":q")
pagina que puede servir: 
https://git-scm.com/book/en/v2/Customizing-Git-Git-Configuration 
o tambien:
https://devhints.io/git-log
************************************************************************************************************
para no monitorear una carpeta creo un archivo llamado
.gitignore 
y cuando abro el archivo escribo las carpetas o archivos que no quiero que se monitoreen
luago cuando escribamos git estatus en la consola SI tenemos que agregar el 
.gitignore
para que surga efecto, escribimos en la consola:
git add .gitignore
************************************************************************************************************
usamos el commit siempre que nuestro codigo funcione, es por concenso, no hay una regla  
************************************************************************************************************
asdasd
**fin clase 2.0-resumen**
Ha llegado el momento de que pongas en práctica lo visto en clase. Para hacer esto, sigue los pasos que se enumeran a continuación.

1) En la terminal (o Git Bash, en Windows) navega hasta la carpeta recién creada (usa el comando cd para navegar entre carpetas);

2) Ejecuta el comando git add index.html para marcar el archivo para ser guardado (commiteado);

3) Ejecuta git status y verifica que el archivo haya cambiado de estado y esté listo para ser guardado (commiteado);

4) Después de agregarlo, ejecuta el comando git commit -m "Creando archivo index.html con lista de cursos". Puedes cambiar el mensaje de commit si quieres;

5) Cambia el archivo index.html. Agrega el acento en "Integración continua", por ejemplo;

6) Agrega el archivo a guardar con git add .;

7) Ejecuta el comando git commit -m "Acento agregado en el curso de Integración Continua". Puedes cambiar el mensaje de commit si quieres;

8) Ejecuta el comando git log y analiza su salida. También ejecuta git log --oneline, git log -p y otras alternativas que desees probar;

9) Crea un archivo vacío con el nombre que desees, por ejemplo, ide-config;

10) Crea el archivo .gitignore y agrega una línea con el nombre del archivo recién creado (ide-config, en el ejemplo anterior);

11) Ejecuta git status y verifica que el archivo ide-config no esté en la lista para ser agregado;

12) Agrega (con git add .gitignore) y confirma (con git commit -m "Adding .gitignore") el archivo .gitignore.

** lo que se aprendio**
En esta aula aprendimos:

Que un commit es la forma de guardar un estado o versión de nuestro código;
Cómo agregar archivos para commitear con git add;
Cómo commitear archivos usando el comando git commit;
Cómo verificar el historial de commits, a través de git log y algunas de sus opciones:
git log --oneline
git log -p
git log --pretty="parámetros de formato"
Cómo hacer que Git no monitoree archivos, a través de .gitignore
Que no debemos realizar commits, es decir, guardar un estado, de nuestra aplicación que no esté funcionando.

*************************
**inicio clase 3.0**

********************



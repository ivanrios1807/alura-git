**git log es el registro de todos los cambios que hacemos 
--
** git status: es para saber el estado de tal carpeta

** git add "nombre del archivo":para que git monitoree los cambios o agrege las modificaciones de ese archivo
si hago **git add . => monitorea todos los archivos
**git commit -m "mensaje general de lo que se cambio" y guardamos los cambiios para el git
*************************************************************************************
"en caso de que haya un error hay que 'registrarse primero'" => con el siguiente comando: ** git config --global user.email "email" 
tambien tenemos que usar:** git config --global user.name "nombre"
*************************************************************************************

**git log** nos permite ver el registro de todos los cambios que hacemos 
para configurar mi email y mi nombre hago:
git config --local(o tambien --global) user.name "nombre"

si ahora escribo en el terminal:
 git config user.name 
la consola me va a dar el nombre 
si escribo
 git config user.email 
la consola va a dar  el email que ya registre

************************************************************************************************************
tambioen podemos usar 
git log --oneline
git log -p (para salir de este comando usar ":q")
pagina que puede servir: 
https://git-scm.com/book/en/v2/Customizing-Git-Git-Configuration 
o tambien:
https://devhints.io/git-log
************************************************************************************************************
para no monitorear una carpeta creo un archivo llamado
.gitignore 
y cuando abro el archivo escribo las carpetas o archivos que no quiero que se monitoreen
luago cuando escribamos git estatus en la consola SI tenemos que agregar el 
.gitignore
para que surga efecto, escribimos en la consola:
git add .gitignore
************************************************************************************************************
usamos el commit siempre que nuestro codigo funcione, es por concenso, no hay una regla  
************************************************************************************************************
asdasd
**fin clase 2.0-resumen**
Ha llegado el momento de que pongas en práctica lo visto en clase. Para hacer esto, sigue los pasos que se enumeran a continuación.

1) En la terminal (o Git Bash, en Windows) navega hasta la carpeta recién creada (usa el comando cd para navegar entre carpetas);

2) Ejecuta el comando git add index.html para marcar el archivo para ser guardado (commiteado);

3) Ejecuta git status y verifica que el archivo haya cambiado de estado y esté listo para ser guardado (commiteado);

4) Después de agregarlo, ejecuta el comando git commit -m "Creando archivo index.html con lista de cursos". Puedes cambiar el mensaje de commit si quieres;

5) Cambia el archivo index.html. Agrega el acento en "Integración continua", por ejemplo;

6) Agrega el archivo a guardar con git add .;

7) Ejecuta el comando git commit -m "Acento agregado en el curso de Integración Continua". Puedes cambiar el mensaje de commit si quieres;

8) Ejecuta el comando git log y analiza su salida. También ejecuta git log --oneline, git log -p y otras alternativas que desees probar;

9) Crea un archivo vacío con el nombre que desees, por ejemplo, ide-config;

10) Crea el archivo .gitignore y agrega una línea con el nombre del archivo recién creado (ide-config, en el ejemplo anterior);

11) Ejecuta git status y verifica que el archivo ide-config no esté en la lista para ser agregado;

12) Agrega (con git add .gitignore) y confirma (con git commit -m "Adding .gitignore") el archivo .gitignore.

** lo que se aprendio**
En esta aula aprendimos:

Que un commit es la forma de guardar un estado o versión de nuestro código;
Cómo agregar archivos para commitear con git add;
Cómo commitear archivos usando el comando git commit;
Cómo verificar el historial de commits, a través de git log y algunas de sus opciones:
git log --oneline
git log -p
git log --pretty="parámetros de formato"
Cómo hacer que Git no monitoree archivos, a través de .gitignore
Que no debemos realizar commits, es decir, guardar un estado, de nuestra aplicación que no esté funcionando.

*************************


**inicio clase 3.0**






crear carpeta:
	mkdir nombreDeVarpeta
crear servidor puro que solo tiene las modificaciones
	git init --bare
listar todos los servidores remotos quenuetsro repositorio conoce
	git remote 
agregar servidor remoto a nuestro servidor local
	git remote add nombreDelServidor direcccion(ej: G:/Mi unidad/oracle/8-Git y GitHub controle y comparta su cÃŗdigo/servidor/)
si quiero corroborarr la direccion del servidor:
	git remote -v
		la direccion del servidor local puede ser un link 
si notamos nos aparece: 
	fetch
		es de donde nosostros vamos a obtener las informaciones 
	push
		es a donde vamos a enviar la iformacion
si otra persona quiere tener nusestro repositorio
	git clone direcciondenuestroservidor
enviar datos al servidorlocal
	git push nombredelservidor
ahora la otra persona tiene que traer los datos que se subieron al servidor,vamos a la carpeta de la otra persona 
si usamos 
	git remote 
nos aparece origin que es el nombre que le ponen por defecto cuando se agregan repositorios.
Ahora vamos a cambiarle el nombre
git remote rename origin nombrequequiera
si usamos el 
	git remote 
nos aparece el nombre que le pusimos.
Vamos a agregar el repositorio
	git pull nombrequelepusimosalservidor master
		"master" es la rama
Ahora que ya tenemos los archivos en la caprta de la otra persona e hicimos cambios los guardamos con:
	git add nombredelarchivos.conlaextension
luego:
	git commit -m "mensaje"
y ahora enviamos los cambios al servidor con :
	git push nombredelservidor master
una vez hecho esto vamos a la carpeta "original" y traemos los archivos modificados por la otra persona con:
	git pull nombredelservidor master

ahora caundo nos creamos la cuenta en github y queresmo subir nuestro repositorio a él usamos 
	git remote add origin direccionurl
y despues el comando 
	git push origin master
si apretamos f5 en la pagina ddonde esta nuestro repositorio vamos a ver los archivos ya subidos


					**resumen del capitulo 3**
Ha llegado el momento de que pongas en práctica lo visto en clase. Para hacer esto, sigue los pasos que se enumeran a continuación.

1) Cree una nueva carpeta en su computadora;

2) En la terminal (o Git Bash, en Windows) navega hasta la carpeta recién creada (use el comando cd para navegar entre carpetas);

3) Ejecuta el comando git init --bare;

4) Navega hasta la carpeta donde se encuentra tu proyecto;

5) Ejecuta el comando git remote add servidorlocal {ruta}. Reemplaza {ruta} con la ruta completa de la carpeta recién creada;

6) Crea una nueva carpeta en tu computadora, para representar el trabajo de otra persona;

7) En la terminal (o Git Bash, en Windows) navega hasta la carpeta recién creada;

8) Ejecuta el comando git clone {ruta} proyecto. Reemplaza {ruta} con la ruta completa a la carpeta que creamos en el primer paso;

9) Ten en cuenta que el repositorio clonado está vacío;

10) Accede a la carpeta del Proyecto y ejecuta el comando git remote rename origin servidorlocal para cambiar el nombre del repositorio local de la otra persona de "origin" a "servidorlocal";

11) Navega a la carpeta donde se encuentra tu proyecto original;

12) Ejecute el comando git push servidorlocal master para enviar tus cambios a tu servidor;

13) Navega hasta la carpeta creada en el paso 6;

14) Ejecuta el comando git pull servidorlocal master para descargar los cambios;

15) Abre tu navegador y vé a http://github.com/;

16) Crea una cuenta;

17) Crea un nuevo repositorio haciendo clic en el símbolo más (+) en la esquina superior derecha;

18) En la terminal (o Git Bash, en Windows) agrega el repositorio remoto recién creado a tu proyecto inicial (los comandos los muestra el propio GitHub);

19) Ejecuta git push origin master para enviar tus cambios al repositorio en GitHub.
**********************fin capitulo 3*****************************
********************
				*********capitulo 4*********
para dividir el trabajo en un mismo archivo 
crear un branch
	git branch titulo

ahora cambio a la branch titulo
	git checkout titulo
para visualizarlo podemos usar la pagina git visualizing
podemos usar el
	git add . 
para guardar todos los archivos
si ahora quiero crear un branch y moverme a esa beanch uso el comando:
	git checkout -b nombreDeBranch

si quiero unir dos brench uso el 
	git merge nombreDeLaOtraRama

con 
	git rebase nombreDelBrench 
hacemos que todos los commit de master vayan atras de los commit hechos en nombreDelBrench y logramos una unica linea




